# name: Deploy to EC2
# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
    # - name: Checkout code
    #   uses: actions/checkout@v2
    #   with:
    #     ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # - name: Deploy to EC2
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ${{ secrets.EC2_USERNAME }}
    #     private-key: ${{ secrets.EC2_PRIVATE_KEY }}
    #     # ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     script: |
    #       cd lativ-project 
    #       pm2 start ecosystem.config.js --only app

# name: Deploy to EC2
# on:
#   push:
#     branches:
#       - main
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
#     - name: Setup SSH
#       run: |
#         echo "${{ secrets.EC2_PRIVATE_KEY }}" | tr -d '\r' | sudo ssh-add ~/.ssh/id_rsa

#     - name: Deploy to EC2
#       run: |
#         ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
#         git pull


# name: Deploy to EC2
# on:
#   push:
#     branches:
#       - main
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
#     - name: Setup SSH
#       run: |
#         echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2.pem
#         chmod 600 ec2.pem
#     - name: Deploy to EC2
#       run: |
#         eval `ssh-agent`
#         sudo ssh-add ~/.ssh/ec2.pem
#         # ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
#         ssh -i ec2.pem ec2-user@${{ secrets.EC2_IP }}

name: Deploy to EC2
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
            HOSTNAME : ${{ secrets.EC2_HOST  }}
            USER_NAME : ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >> ~/.ssh/config <<END
          Host ec2
            HostName $HOSTNAME
            User $USER_NAME
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END
          
      - name: List home directory
          run: ssh ec2 'ls -la'

# name: CI/CD counter app

# on:
#   push:
#     branches: [ master ]

# jobs:
# #First we will see the application build or not , then we will deploy in EC2
#   build:
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v2
    
#     - name: Build the docker_compose
#       run: docker-compose up -d --build
      
#     - name: Buid the application
#       run: docker-compose exec -T counter_app npm run build

#   Deploy:
#     needs: build
#     runs-on: ubuntu-latest
    
#     steps:
#       - uses: actions/checkout@v2 
#       - name: Deploy in EC2
#         env:
#             PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
#             HOSTNAME : ${{ secrets.HOSTNAME  }}
#             USER_NAME : ${{ secrets.USER_NAME  }}
            
#         run: |
#           echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
#           ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
#             #Now we have got the access of EC2 and we will start the deploy .
#             cd /home/ubuntu/CounterApp &&
#             git checkout master &&
#             git fetch --all &&
#             git reset --hard origin/master &&
#             git pull origin master &&
#             docker-compose -f docker-compose.prod.yml up -d --build 






